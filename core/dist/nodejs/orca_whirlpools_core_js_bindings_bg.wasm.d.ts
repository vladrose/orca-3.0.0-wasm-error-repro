/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function decreaseLiquidityQuote(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function decreaseLiquidityQuoteA(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function decreaseLiquidityQuoteB(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function increaseLiquidityQuote(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function increaseLiquidityQuoteA(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function increaseLiquidityQuoteB(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function getTickArrayStartTickIndex(a: number, b: number): number;
export function tickIndexToSqrtPrice(a: number): number;
export function sqrtPriceToTickIndex(a: number): number;
export function getInitializableTickIndex(a: number, b: number, c: number): number;
export function getPrevInitializableTickIndex(a: number, b: number): number;
export function getNextInitializableTickIndex(a: number, b: number): number;
export function isTickIndexInBounds(a: number): number;
export function isTickInitializable(a: number, b: number): number;
export function invertTickIndex(a: number): number;
export function invertSqrtPrice(a: number): number;
export function getFullRangeTickIndexes(a: number): number;
export function orderTickIndexes(a: number, b: number): number;
export function isFullRangeOnly(a: number): number;
export function getTickIndexInArray(a: number, b: number, c: number): Array;
export function tryGetAmountDeltaA(a: number, b: number, c: number, d: number): Array;
export function tryGetAmountDeltaB(a: number, b: number, c: number, d: number): Array;
export function tryGetNextSqrtPriceFromA(a: number, b: number, c: number, d: number): Array;
export function tryGetNextSqrtPriceFromB(a: number, b: number, c: number, d: number): Array;
export function tryApplyTransferFee(a: number, b: number): Array;
export function tryReverseApplyTransferFee(a: number, b: number): Array;
export function tryGetMaxAmountWithSlippageTolerance(a: number, b: number): Array;
export function tryGetMinAmountWithSlippageTolerance(a: number, b: number): Array;
export function tryApplySwapFee(a: number, b: number): Array;
export function tryReverseApplySwapFee(a: number, b: number): Array;
export function _POSITION_BUNDLE_SIZE(): number;
export function _TICK_ARRAY_NOT_EVENLY_SPACED(): number;
export function _TICK_INDEX_OUT_OF_BOUNDS(): number;
export function _INVALID_TICK_INDEX(): number;
export function _ARITHMETIC_OVERFLOW(): number;
export function _AMOUNT_EXCEEDS_MAX_U64(): number;
export function _SQRT_PRICE_OUT_OF_BOUNDS(): number;
export function _TICK_SEQUENCE_EMPTY(): number;
export function _SQRT_PRICE_LIMIT_OUT_OF_BOUNDS(): number;
export function _INVALID_SQRT_PRICE_LIMIT_DIRECTION(): number;
export function _ZERO_TRADABLE_AMOUNT(): number;
export function _INVALID_TIMESTAMP(): number;
export function _INVALID_TRANSFER_FEE(): number;
export function _INVALID_SLIPPAGE_TOLERANCE(): number;
export function _TICK_INDEX_NOT_IN_ARRAY(): number;
export function _NUM_REWARDS(): number;
export function _FEE_RATE_DENOMINATOR(): number;
export function _TICK_ARRAY_SIZE(): number;
export function _FULL_RANGE_ONLY_TICK_SPACING_THRESHOLD(): number;
export function _MIN_TICK_INDEX(): number;
export function _MAX_TICK_INDEX(): number;
export function isPositionInRange(a: number, b: number, c: number): number;
export function positionStatus(a: number, b: number, c: number): number;
export function positionRatio(a: number, b: number, c: number): number;
export function priceToSqrtPrice(a: number, b: number, c: number): number;
export function sqrtPriceToPrice(a: number, b: number, c: number): number;
export function invertPrice(a: number, b: number, c: number): number;
export function tickIndexToPrice(a: number, b: number, c: number): number;
export function priceToTickIndex(a: number, b: number, c: number): number;
export function firstUnoccupiedPositionInBundle(a: number, b: number): Array;
export function isPositionBundleFull(a: number, b: number): number;
export function isPositionBundleEmpty(a: number, b: number): number;
export function swapQuoteByInputToken(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function swapQuoteByOutputToken(a: number, b: number, c: number, d: number, e: number, f: number, g: number): Array;
export function collectFeesQuote(a: number, b: number, c: number, d: number, e: number, f: number): Array;
export function collectRewardsQuote(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): Array;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_exn_store(a: number): void;
export function __externref_table_alloc(): number;
export function __externref_table_dealloc(a: number): void;
export function __wbindgen_start(): void;
